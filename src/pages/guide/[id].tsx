import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect } from "react";
import { toast } from "react-hot-toast";
import Background from "../../components/background";
import Error from "../../components/error";
import Loading from "../../components/loading";
import StepCard from "../../components/part-card";
import { api } from "../../utils/api";

const Guide: NextPage = () => {
  const id = useRouter().query.id as string;
  const guideQuery = api.guides.viewGuide.useQuery({ id });

  useEffect(() => {
    if (
      guideQuery.status === "success" &&
      guideQuery.data !== undefined &&
      id !== undefined
    ) {
      (async () => {
        let shouldRefetch = false;

        // Go through each step and substep and make sure that a paragraph exists
        for (const step of guideQuery.data.steps) {
          for (const substep of step.substeps) {
            if (substep.paragraph === null || substep.paragraph === "") {
              console.log(
                `Generating paragraph for ${step.text} - ${substep.text}...`
              );

              const baseURL = window.location.origin;
              const apiPath = new URL(`${baseURL}/api/guides/paragraph`);
              apiPath.searchParams.append("guideID", id);
              apiPath.searchParams.append("partID", step.id);
              apiPath.searchParams.append("stepID", substep.id);

              console.log(apiPath.toString());

              await toast.promise(
                fetch(apiPath.toString()),
                {
                  loading: `Generating paragraph for ${step.text} - ${substep.text}...`,
                  success: () => {
                    shouldRefetch = true;
                    return `Generated paragraph for ${step.text} - ${substep.text}!`;
                  },
                  error: `Failed to generate paragraph for ${step.text} - ${substep.text}!`,
                },
                {
                  position: "bottom-right",
                }
              );
            }
          }
        }

        if (shouldRefetch) guideQuery.refetch();
      })();
    }
  }, [guideQuery, id]);

  if (guideQuery.status !== "success") {
    return <Loading />;
  }

  if (guideQuery.isError) {
    return <Error />;
  }

  return (
    <>
      <Head>
        <title>{"wikiNow - " + guideQuery.data?.title ?? "Guide"}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Background>
        <h1 className="text-5xl font-extrabold tracking-tight text-port_gore-400 sm:text-[4rem]">
          {guideQuery.data?.title}?
        </h1>
        <h2 className="p-4">Views: {guideQuery.data?.views}</h2>
        <div className="container my-4 flex flex-col gap-4">
          {guideQuery.data?.steps.map((step) => {
            return (
              <StepCard key={step.id} step={step} substeps={step.substeps} />
            );
          })}
        </div>
      </Background>
    </>
  );
};

export default Guide;
